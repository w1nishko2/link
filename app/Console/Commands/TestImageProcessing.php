<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\ImageProcessingService;
use Intervention\Image\ImageManager;
use Intervention\Image\Drivers\Gd\Driver;
use Illuminate\Support\Facades\Storage;

class TestImageProcessing extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:image-processing';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π';

    protected $imageService;

    public function __construct(ImageProcessingService $imageService)
    {
        parent::__construct();
        $this->imageService = $imageService;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('=== –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===');
        $this->newLine();

        // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        $this->info('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        
        try {
            $manager = new ImageManager(new Driver());
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            $image = $manager->create(800, 600)->fill('rgb(70, 130, 180)');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            $image->text('Test Image 800x600', 400, 300, function ($font) {
                $font->size(24);
                $font->color('white');
                $font->align('center');
                $font->valign('middle');
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            $testPath = storage_path('app/test_image.jpg');
            $image->toJpeg(90)->save($testPath);
            
            $this->info('‚úì –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ' . $testPath);
            
        } catch (\Exception $e) {
            $this->error('‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' . $e->getMessage());
            return 1;
        }

        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        $this->info('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
        
        // –°–æ–∑–¥–∞–µ–º UploadedFile –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        $testFile = new \Illuminate\Http\UploadedFile(
            $testPath,
            'test_image.jpg',
            'image/jpeg',
            null,
            true
        );
        
        $errors = $this->imageService->validateImage($testFile, 'gallery');
        
        if (empty($errors)) {
            $this->info('‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
            $this->error('‚úó –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' . implode(', ', $errors));
        }

        // –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP
        $this->info('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...');
        
        try {
            $processedPath = $this->imageService->processAndStore(
                $testFile,
                'gallery',
                'test/gallery'
            );
            
            if ($processedPath) {
                $this->info('‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ' . $processedPath);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (Storage::disk('public')->exists($processedPath)) {
                    $this->info('‚úì –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ storage/app/public');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    $fileSize = Storage::disk('public')->size($processedPath);
                    $this->info('‚úì –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ' . number_format($fileSize / 1024, 2) . ' KB');
                    
                } else {
                    $this->error('‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ storage');
                }
                
            } else {
                $this->error('‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            }
            
        } catch (\Exception $e) {
            $this->error('‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ' . $e->getMessage());
        }

        // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        if (isset($processedPath) && $processedPath) {
            $this->info('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä...');
            
            try {
                $thumbnailPath = $this->imageService->createThumbnail($processedPath, 200, 200);
                
                if ($thumbnailPath && Storage::disk('public')->exists($thumbnailPath)) {
                    $this->info('‚úì –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: ' . $thumbnailPath);
                } else {
                    $this->error('‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã');
                }
                
            } catch (\Exception $e) {
                $this->error('‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: ' . $e->getMessage());
            }
        }

        // –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        $this->info('5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        
        $types = ['avatar', 'service', 'article', 'banner', 'background'];
        
        foreach ($types as $type) {
            try {
                $typePath = $this->imageService->processAndStore(
                    $testFile,
                    $type,
                    "test/{$type}"
                );
                
                if ($typePath) {
                    $this->info("‚úì –¢–∏–ø '{$type}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {$typePath}");
                } else {
                    $this->error("‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–ø–∞ '{$type}'");
                }
                
            } catch (\Exception $e) {
                $this->error("‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–ø–∞ '{$type}': " . $e->getMessage());
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        $this->info('6. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...');
        
        try {
            // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            if (file_exists($testPath)) {
                unlink($testPath);
                $this->info('‚úì –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
            }
            
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            $testFiles = Storage::disk('public')->allFiles('test');
            foreach ($testFiles as $file) {
                Storage::disk('public')->delete($file);
            }
            $this->info('‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
            
        } catch (\Exception $e) {
            $this->warn('‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ' . $e->getMessage());
        }

        $this->newLine();
        $this->info('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
        $this->newLine();
        $this->info('üìã –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
        $this->line('- –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ WebP');
        $this->line('- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∂–∏–º–∞—é—Ç—Å—è —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º');
        $this->line('- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        $this->line('- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π');
        $this->line('- –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
        
        return 0;
    }
}
