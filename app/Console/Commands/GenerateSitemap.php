<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\User;
use App\Models\Article;
use Illuminate\Support\Facades\Storage;

class GenerateSitemap extends Command
{
    protected $signature = 'seo:sitemap';
    protected $description = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML sitemap –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º';

    public function handle()
    {
        $this->info('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML sitemap...');

        $sitemap = '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
        $sitemap .= '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\n";

        // –ì–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        $users = User::all();
        foreach ($users as $user) {
            // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $sitemap .= $this->generateUrlEntry(
                route('user.show', $user->username),
                $user->updated_at,
                'weekly',
                '0.8'
            );
            
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $sitemap .= $this->generateUrlEntry(
                route('articles.index', $user->username),
                $user->updated_at,
                'weekly',
                '0.7'
            );

        }

        // –°—Ç–∞—Ç—å–∏
        $articles = Article::with('user')->where('is_published', true)->get();
        foreach ($articles as $article) {
            $sitemap .= $this->generateUrlEntry(
                route('articles.show', ['username' => $article->user->username, 'slug' => $article->slug]),
                $article->updated_at,
                'monthly',
                '0.6'
            );
        }

        $sitemap .= '</urlset>';

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º sitemap –Ω–∞–ø—Ä—è–º—É—é –≤ public –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        file_put_contents(public_path('sitemap.xml'), $sitemap);

        $this->info('‚úÖ XML sitemap —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ' . public_path('sitemap.xml'));
        $this->info('üìä –î–æ–±–∞–≤–ª–µ–Ω–æ URL:');
        $this->info("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã): {$users->count()}");
        $this->info("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–µ–π): {$users->count()}");
        $this->info("   –°—Ç–∞—Ç–µ–π: {$articles->count()}");
        $this->info("   –í—Å–µ–≥–æ: " . ($users->count() * 2 + $articles->count()));
    }

    private function generateUrlEntry($url, $lastmod, $changefreq, $priority)
    {
        return "  <url>\n" .
               "    <loc>{$url}</loc>\n" .
               "    <lastmod>{$lastmod->format('Y-m-d')}</lastmod>\n" .
               "    <changefreq>{$changefreq}</changefreq>\n" .
               "    <priority>{$priority}</priority>\n" .
               "  </url>\n";
    }
}
